enum List T {
  Root,
  Cons(T, List T),
}

map A B : (A -> B) -> List A -> List B;
map f xs = {
  match xs {
    ::Root => Root::<B>,
    # map is not the correct behavior
    # should be able to overload with map::<B>::<A>
    Cons(x, xs) => Cons::<B> (f x) (map f xs)
  }
}

foldr A B : (A -> B -> B) -> B -> List A -> B;
foldr f b as = {
  match as {
    Cons(a, ::Root) => f a b,
    Cons(a, as) => foldr f (f a b) as,
  }
}

foldl A B : (A -> B -> B) -> B -> List A -> B;
foldl f b as = {
  match as {
    Cons(a, ::Root) => f a b,
    Cons(a, as) => f a (foldl f b as),
  }
}

plus : num -> num -> num;
plus a b = { a + b }

#to_string T : T -> string;
#to_string x = { "" + x }

main : () -> any;
main () = {
  let list = Cons::<num> 1 (Cons::<num> 2 (Cons::<num> 3 Root::<num>)) in (
    map::<num>::<num> (plus 1) list;
    #map::<string>::<num> to_string list;
    foldr::<num>::<num> plus 0 list;
    foldl::<num>::<num> plus 0 list;
  )
}
